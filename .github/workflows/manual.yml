# This is a basic workflow that is manually triggered

name: BuildMavenManual

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Build'
        # Default value if no value is explicitly provided
        default: 'Maven'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
#      - name: maven-settings-xml-action
#        uses: whelk-io/maven-settings-xml-action@v14
#        with:
#          repositories: '[{ "id": "bDev", "url": "http://developer.stupica.com/maven" }]'

      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: CreateRelease
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: d20210124e
          release_name: Release_d20210124e
          body: |
            Release testing - ${{ github.ref }} ..
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/servletMirror.war
          asset_name: servletMirror.war
          asset_content_type: application/java-archive

      - name: Build project # This would actually build your project, using zip for an example artifact
        id: pack-release
        run: |
          mkdir -p build/servletMirror
          cp target/servletMirror.war build/servletMirror/
          cp target/dependency/jetty-runner.jar build/servletMirror/
          cp jetty-runner.xml build/servletMirror/
          cp *.jks build/servletMirror/
          cp run01.sh build/servletMirror/
          zip -9 -r target/servletMirror.zip build/servletMirror
      - name: Upload Release Asset - zip
        id: upload-release-asset2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/servletMirror.zip
          asset_name: servletMirror.zip
          asset_content_type: application/zip

#      - name: Archive production artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: dist-war
#          path: target/*.war
#          retention-days: 55

#      - name: Publish to GitHub Packages Apache Maven
#        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
